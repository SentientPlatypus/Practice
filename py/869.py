
class Solution:
    def getCountDictionary(n:int):
        matchDict = {}
        for c in str(n):
            count = matchDict.get(c, 0)
            matchDict[c] = count + 1
        return matchDict

    def reorderedPowerOf2(self, n: int) -> bool:
        digitSets = [{'1': 1}, 
                    {'2': 1}, 
                    {'4': 1}, 
                    {'8': 1}, 
                    {'1': 1, '6': 1}, 
                    {'3': 1, '2': 1}, 
                    {'6': 1, '4': 1}, 
                    {'1': 1, '2': 1, '8': 1}, 
                    {'2': 1, '5': 1, '6': 1}, 
                    {'5': 1, '1': 1, '2': 1}, 
                    {'1': 1, '0': 1, '2': 1, '4': 1}, 
                    {'2': 1, '0': 1, '4': 1, '8': 1}, 
                    {'4': 1, '0': 1, '9': 1, '6': 1}, 
                    {'8': 1, '1': 1, '9': 1, '2': 1}, 
                    {'1': 1, '6': 1, '3': 1, '8': 1, '4': 1}, 
                    {'3': 1, '2': 1, '7': 1, '6': 1, '8': 1}, 
                    {'6': 2, '5': 2, '3': 1}, 
                    {'1': 2, '3': 1, '0': 1, '7': 1, '2': 1}, 
                    {'2': 2, '6': 1, '1': 1, '4': 2}, 
                    {'5': 1, '2': 2, '4': 1, '8': 2}, 
                    {'1': 1, '0': 1, '4': 1, '8': 1, '5': 1, '7': 1, '6': 1}, 
                    {'2': 2, '0': 1, '9': 1, '7': 1, '1': 1, '5': 1}, 
                    {'4': 3, '1': 1, '9': 1, '3': 1, '0': 1}, 
                    {'8': 4, '3': 1, '6': 1, '0': 1}, 
                    {'1': 2, '6': 2, '7': 3, '2': 1}, 
                    {'3': 3, '5': 2, '4': 2, '2': 1}, 
                    {'6': 2, '7': 1, '1': 1, '0': 1, '8': 2, '4': 1}, 
                    {'1': 2, '3': 1, '4': 1, '2': 2, '7': 2, '8': 1}, 
                    {'2': 1, '6': 2, '8': 1, '4': 2, '3': 1, '5': 2}, 
                    {'5': 1, '3': 1, '6': 1, '8': 1, '7': 1, '0': 1, '9': 1, '1': 1, '2': 1}
                ]
                
        matchDict = Solution.getCountDictionary(n)

        for s in digitSets:
            if s == matchDict:
                print(s)
        return any(s == matchDict for s in digitSets)
